/*
 * generated by Xtext 2.15.0
 */
package net.mydreamy.requirementmodel.springboot

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import net.mydreamy.requirementmodel.rEMODEL.Entity
import net.mydreamy.requirementmodel.rEMODEL.PrimitiveTypeCS
import net.mydreamy.requirementmodel.rEMODEL.EnumEntity
import net.mydreamy.requirementmodel.rEMODEL.EntityType
import net.mydreamy.requirementmodel.rEMODEL.TypeCS

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SpringBootGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (e : resource.allContents.toIterable.filter(typeof(Entity))) {
			fsa.generateFile("newentities/" + e.name + ".java", e.compileEntity)
		}
	}
	
	def compileEntity(Entity entity) { 
	'''
			package entities;
			
			import services.impl.StandardOPs;
			import java.util.List;
			import java.util.LinkedList;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.time.LocalDate;
			import java.io.Serializable;
			import java.lang.reflect.Method;
			
			public class «entity.name»«IF entity.superEntity !== null» extends «entity.superEntity.name» «ENDIF» implements Serializable {
				
				/* all primary attributes */
				«FOR attribute : entity.attributes»
					private «attribute.type.compileType» «attribute.name»;
				«ENDFOR»
			}
		'''
	}
	
	/* For primary and enum type */
	def compileType(TypeCS type) 
	{
		
		if (type !== null)
		{
			switch type {
				PrimitiveTypeCS : 
					switch type {
					case  type.name == "Boolean" : "boolean"
					case  type.name == "String" : "String"
					case  type.name == "Real" : "float"
					case  type.name == "Integer" : "int"
					case  type.name == "Date" : "LocalDate"
					default: ""
				}
				EnumEntity : type.name
				EntityType : type.entity.name
				default: ""
			}
		}			
		else 
		{
			""
		}	
	}
	
}
